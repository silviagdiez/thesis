function computeKernel04()
%=== This function computes the interior product from
% cycles among all pairs of cycles
%============================================

%dirs = {'../Self-avoiding/Cycles','../Self-avoiding/Paths'};
dirs = {'../Self-avoiding/CyclesBeatles','../Self-avoiding/CyclesQueen'};

tic();

for l=1:length(dirs)

    dir = dirs{l};
	mylist = ls(dir);
	numItems(i) = (length(mylist)/41)
	n = 0;
	cbegin = 1;
	cend = 0;
    
    %=== We make a list of the ids of the files in the directory ===
    for i=1:numItems 
		['%%%%%%%%%%%%%% ',mat2str(i),' %%%%%%%%%%%%%%']
		cend = cbegin + 39;
		myfile{l,i} = mylist(cbegin:cend)
		cbegin = cend + 2;
        
        n2 = 0;
        cbegin2 = 1;
        cend2 = 0;
    end

end

totalItems = sum(numItems)

%=== This is the similarity matrix ===
K = zeros(totalItems,totalItems);
	
%=== We compute the matrix in 4 steps ===
for j=1:numItems(1)
    for k=1:numItems(1)
        
        file1 = myfile{1,j};
        file2 = myfile{1,j};
        
        %=== We load the file ===
        path1 = [dir,'/',file1];
        path1 = [dir,'/',file1];
        f2 = load(path2);
        if l == 1
            res2 = f2.saveCycles;
        else
            res2 = f2.savePaths;
        end
    end
end

for j=1:numItems(2)
    for k=1:numItems(2)
    end
end

for j=1:numItems(1)
    for k=1:numItems(2)
    end
end

for j=1:numItems(2)
    for k=1:numItems(1)
    end
end
	
for j=1:totalItems 
            cend2 = cbegin2 + 39;
            myfile2 = mylist(cbegin2:cend2);
            cbegin2 = cend2 + 2;
	
            %=== We load the file ===
            path2 = [dir,'/',myfile2];
            f2 = load(path2);
            if l == 1
                res2 = f2.saveCycles;
            else
                res2 = f2.savePaths;
            end
            
            %=== We compute the inner product ===
            %ip = cycleKernel03(res1,res2);
            ip = cycleKernel02(res1,res2);
            %ip = cycleKernel(res1,res2);
            K(i,j) = ip;
        end
    end
    
    %=== We save the obtained matrix ===
    if l == 1
        %save('-ascii','KcyclesQueen','K');
        save('-ascii','KcyclesBeatles','K');
    else
        %save('-ascii','KpathsQueen','K');
        save('-ascii','KpathsBeatles','K');
    end
    
end
toc()
